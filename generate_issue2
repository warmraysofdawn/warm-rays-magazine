import tkinter as tk
from tkinter import ttk, filedialog
from datetime import datetime
import os

class VerseTab(ttk.Frame):
    def __init__(self, master, notebook):
        super().__init__(master)
        self.notebook = notebook
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∏—Ö–∞
        tk.Label(self, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏—Ö–∞:").pack(anchor='w', padx=10, pady=(10,0))
        self.title_entry = tk.Entry(self, width=50)
        self.title_entry.pack(padx=10, pady=(0,10), fill='x')
        
        # –¢–µ–∫—Å—Ç —Å—Ç–∏—Ö–∞
        tk.Label(self, text="–¢–µ–∫—Å—Ç —Å—Ç–∏—Ö–∞:").pack(anchor='w', padx=10)
        self.text_text = tk.Text(self, height=15, wrap='word')
        self.text_text.pack(padx=10, pady=(0,10), fill='both', expand=True)
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        tk.Label(self, text="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):").pack(anchor='w', padx=10)
        self.note_entry = tk.Entry(self, width=50)
        self.note_entry.pack(padx=10, pady=(0,10), fill='x')
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        tk.Button(self, text="√ó –£–¥–∞–ª–∏—Ç—å", command=self.delete_tab,
                 fg='red', relief='flat').pack(side='right', padx=10, pady=5)
    
    def delete_tab(self):
        for i, tab in enumerate(self.notebook.tabs()):
            if self.notebook.nametowidget(tab) == self:
                self.notebook.forget(i)
                break

class IssueGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ã–ø—É—Å–∫–æ–≤")
        self.style = ttk.Style()
        self.style.configure('TNotebook.Tab', font=('Arial', 10, 'bold'))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ttk.Frame(root)
        self.main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.main_frame)
        control_frame.pack(fill='x', pady=5)
        
        # –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–ø—É—Å–∫–∞
        tk.Label(control_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø—É—Å–∫–∞:").pack(side='left', padx=5)
        self.issue_title = tk.Entry(control_frame, width=40)
        self.issue_title.pack(side='left', fill='x', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="+ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏—Ö", 
                  command=self.add_verse_tab).pack(side='left', padx=10)
        ttk.Button(control_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–ø—É—Å–∫", 
                  command=self.save_issue).pack(side='right', padx=5)
        
        # –í–∫–ª–∞–¥–∫–∏ —Å–æ —Å—Ç–∏—Ö–∞–º–∏
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # –ü–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.add_verse_tab()
        
    def add_verse_tab(self):
        tab = VerseTab(self.notebook, self.notebook)
        self.notebook.add(tab, text=f"–°—Ç–∏—Ö {len(self.notebook.tabs())+1}")
        self.notebook.select(tab)
    
    def collect_data(self):
        data = {
            'title': self.issue_title.get(),
            'verses': [],
            'date': datetime.now().strftime('%d.%m.%Y')
        }
        
        for tab_id in self.notebook.tabs():
            tab = self.notebook.nametowidget(tab_id)
            verse_data = {
                'title': tab.title_entry.get(),
                'text': tab.text_text.get("1.0", tk.END).strip(),
                'note': tab.note_entry.get()
            }
            data['verses'].append(verse_data)
        
        return data
    
    def save_issue(self):
        data = self.collect_data()
        if not data['title']:
            tk.messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø—É—Å–∫–∞!")
            return
            
        save_path = filedialog.asksaveasfilename(
            defaultextension=".html",
            filetypes=[("HTML Files", "*.html")],
            initialfile=f"issue_{datetime.now().strftime('%Y%m%d')}"
        )
        
        if not save_path:
            return
        
        template = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{data['title']}</title>
    <link rel="stylesheet" href="../css/style.css">
</head>
<body>
    <header>
        <!-- –•–µ–¥–µ—Ä –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö -->
    </header>

    <main>
        <article class="issue">
            <h2>{data['title']}</h2>
            <time>–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {data['date']}</time>
            <div class="verses-container">'''
        
        for verse in data['verses']:
            template += f'''
                <div class="verse-card">
                    <h3>{verse['title']}</h3>
                    <pre>{verse['text']}</pre>
                    {f'<p class="note">{verse["note"]}</p>' if verse['note'] else ''}
                </div>'''
        
        template += '''
            </div>
        </article>
    </main>
    
    <!-- –§—É—Ç–µ—Ä –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö -->
</body>
</html>'''
        
        with open(save_path, 'w', encoding='utf-8') as f:
            f.write(template)
        
        os.startfile(os.path.dirname(save_path))
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = IssueGenerator(root)
    root.geometry("800x600")
    root.mainloop()